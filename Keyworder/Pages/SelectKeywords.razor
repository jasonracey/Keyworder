@page "/select-keywords"

<PageTitle>Select Keywords</PageTitle>

@using Excubo.Blazor.TreeViews
@using Keyworder.Data
@using Keyworder.Utilities
@inject ClipboardService ClipboardService
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<h2>Select Keywords</h2>

@if (!_allKeywords.Any())
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <TreeView
                AllowSelection="true"
                @bind-SelectedItems="_selectedKeywords"
                GetChildren="(keywords) => keywords.Children"
                InitiallyCollapsed="true"
                ItemClass="tree-item"
                ItemDisabled="keyword => IsKeywordDisabled(keyword)"
                Items=@_allKeywords 
                @key=@_selectedKeywords
                SortBy="(keywords) => keywords.OrderBy(keyword => keyword.Name)">
                <ItemTemplate>
                    @context.Item.Name
                </ItemTemplate>
            </TreeView>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton
                ButtonStyle="ButtonStyle.Info"
                Click=@ClearSelectedKeywords
                Text="Clear"/>
            <RadzenButton
                ButtonStyle="ButtonStyle.Info"
                Click="@(() => CopyToClipboard(ToFlickrTagsString(_selectedKeywords)))"
                Text="Copy"/>
            <RadzenNotification/>
        </div>
    </div>
}

@code {
    private static readonly NotificationMessage CopySuccessMessage = MessageBuilder.BuildCopySuccessMessage();
    private static readonly NotificationMessage CopyWarningMessage = MessageBuilder.BuildCopyWarningMessage();

    private List<Keyword> _allKeywords = new();
    private List<Keyword> _selectedKeywords = new();

    protected override async Task OnInitializedAsync()
    {
        _allKeywords = await GetAllKeywords();
    }

    private void ClearSelectedKeywords()
    {
        _selectedKeywords = new List<Keyword>();
    }

    private async Task CopyToClipboard(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            NotificationService.Notify(CopyWarningMessage);
        }
        else
        {
            await ClipboardService.WriteTextAsync(input);
            NotificationService.Notify(CopySuccessMessage);
        }
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private static bool IsKeywordDisabled(Keyword keyword)
    {
        return keyword.IsCategory && 
            !keyword.Children.Any();
    }

    private static string ToFlickrTagsString(IEnumerable<Keyword> keywords)
    {
        var values = keywords
            .Where(keyword => !keyword.IsCategory)
            .Select(keyword => keyword.Name);

        return TagService.ToFlickrTagsString(values);
    }
}