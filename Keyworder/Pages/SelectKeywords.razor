@page "/select-keywords"

<PageTitle>Select Keywords</PageTitle>

@using Excubo.Blazor.TreeViews
@using Keyworder.Data
@using Keyworder.Utilities
@inject ClipboardService ClipboardService
@inject KeywordService KeywordService

<h2>Select Keywords</h2>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <TreeView @key=@selectedKeywords Items=@allKeywords ItemDisabled="keyword => IsKeywordDisabled(keyword)" InitiallyCollapsed="true" AllowSelection="true" ItemClass="tree-item" GetChildren="(keywords) => keywords.Children" SortBy="(keywords) => keywords.OrderBy(keyword => keyword.Name)" @bind-SelectedItems="selectedKeywords">
                <ItemTemplate>
                    @context.Item.Name
                </ItemTemplate>
            </TreeView>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton Text="Clear" Disabled=@IsSelectedKeywordsEmpty() Click=@ClearSelectedKeywords />
        </div>
        <div class="col">
            <RadzenButton Text="Copy" Disabled=@IsSelectedKeywordsEmpty() Click="@(() => CopyToClipboard(ToFlickrTagsString(selectedKeywords)))" />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private List<Keyword> selectedKeywords = new List<Keyword>();

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private void ClearSelectedKeywords()
    {
        selectedKeywords = new List<Keyword>();
    }

    private async Task CopyToClipboard(string input)
    {
        await ClipboardService.WriteTextAsync(input);
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private bool IsKeywordDisabled(Keyword keyword)
    {
        return keyword.IsCategory && 
            !keyword.Children.Any();
    }

    private bool IsSelectedKeywordsEmpty()
    {
        return selectedKeywords
            .Where(keyword => !keyword.IsCategory)
            .Count() == 0;
    }

    private string ToFlickrTagsString(IEnumerable<Keyword> keywords)
    {
        var values = keywords
            .Where(keyword => keyword.Children == null)
            .Select(keyword => keyword.Name);

        return TagService.ToFlickrTagsString(values);
    }
}