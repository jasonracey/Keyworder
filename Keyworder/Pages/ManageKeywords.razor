@page "/manage-keywords"

<PageTitle>Manage Keywords</PageTitle>

@using Keyworder.Data
@using Keyworder.Utilities
@inject KeywordService KeywordService
@inject NotificationService NotificationService

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <RadzenTemplateForm 
        Data=@model 
        Submit=@(() => OnSaveButtonClicked(model, currentChangeMode))
        TItem="ManageKeywordsModel">
        <div class="row">
            <RadzenFieldset 
                Text="Manage Keywords">
                <RadzenTabs 
                    SelectedIndex="0">
                    <Tabs>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Create))
                            Text="Create Keyword">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.CategoryDropDownValue 
                                        Change=@(value => OnCategoryDropDownValueChanged(value))
                                        Data=@GetCategories()
                                        Name="CreateKeywordCategoryDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="CreateKeywordCategoryDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox 
                                        @bind-Value=@model.TextBoxValue
                                        MaxLength=50 
                                        Name="CreateKeywordTextBox"
                                        @oninput=@(args => OnKeywordTextChanged(args?.Value)) 
                                        Placeholder="Keyword..." />
                                    <RadzenRequiredValidator
                                        Component="CreateKeywordTextBox"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Edit))
                            Text="Edit Keyword">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.CategoryDropDownValue
                                        Change=@(value => OnCategoryDropDownValueChanged(value))
                                        Data=@GetCategories()
                                        Name="EditKeywordCategoryDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="EditKeywordCategoryDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.KeywordDropDownValue
                                        Change=@(value => OnKeywordDropDownValueChanged(value))
                                        Data=@keywordsByCategory
                                        Name="EditKeywordKeywordDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="EditKeywordKeywordDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox 
                                        @bind-Value=@model.TextBoxValue 
                                        MaxLength=50
                                        Name="EditKeywordTextBox"
                                        @oninput=@(args => OnKeywordTextChanged(args?.Value))
                                        Placeholder="Keyword..." />
                                    <RadzenRequiredValidator
                                        Component="EditKeywordTextBox"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Delete))
                            Text="Delete Keyword">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.CategoryDropDownValue 
                                        Change=@(value => OnCategoryDropDownValueChanged(value)) 
                                        Data=@GetCategories() 
                                        Name="DeleteKeywordCategoryDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="DeleteKeywordCategoryDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.KeywordDropDownValue 
                                        Change=@(value => OnKeywordDropDownValueChanged(value)) 
                                        Data=@GetKeywordsByCategory(model.CategoryDropDownValue)
                                        Name="DeleteKeywordKeywordDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="DeleteKeywordKeywordDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
                <RadzenButton 
                    BusyText=@GetSaveBusyText(currentChangeMode)
                    ButtonStyle=@GetSaveButtonStyle(currentChangeMode)
                    ButtonType="ButtonType.Submit"
                    Icon=@GetSaveButtonIcon(currentChangeMode)
                    IsBusy=@IsSaveButtonBusy(currentFormState)
                    Text=@GetSaveButtonText(currentChangeMode) />
                <RadzenNotification />
            </RadzenFieldset>
        </div>
    </RadzenTemplateForm>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private ChangeMode currentChangeMode = ChangeMode.Create;
    private FormState currentFormState = FormState.Idle;
    private List<string> keywordsByCategory = new List<string>();
    private ManageKeywordsModel model = new ManageKeywordsModel();

    private class ManageKeywordsModel
    {
        private string? textBoxValue;

        public string? CategoryDropDownValue { get; set; }

        public string? KeywordDropDownValue { get; set; }

        public string? TextBoxValue
        {
            get => textBoxValue;
            // prevent white space from bypassing the required validator
            set => textBoxValue = value?.Trim();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private List<string> GetKeywordsByCategory(string? categoryDropDownValue)
    {
        return string.IsNullOrWhiteSpace(categoryDropDownValue)
            ? new List<string>()
            : allKeywords
                .Where(keyword => keyword.IsCategory)
                .Where(keyword => keyword.Name.Equals(categoryDropDownValue, StringComparison.Ordinal))
                .SelectMany(parentKeyword => parentKeyword.Children.Select(childKeyword => childKeyword.Name))
                .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
                .ToList();
    }

    private string GetSaveBusyText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Deleting..."
            : "Saving...";
    }

    private string GetSaveButtonIcon(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "report"
            : "save";
    }

    private ButtonStyle GetSaveButtonStyle(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? ButtonStyle.Danger
            : ButtonStyle.Info;
    }

    private string GetSaveButtonText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Delete"
            : "Save";
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType switch
        {
            ResultType.Created => MessageBuilder.BuildCreatedMessage(EntityType.Keyword),
            ResultType.Deleted => MessageBuilder.BuildDeletedMessage(EntityType.Keyword),
            ResultType.Duplicate => MessageBuilder.BuildDuplicateMessage(EntityType.Keyword),
            ResultType.Edited => MessageBuilder.BuildEditedMessage(EntityType.Keyword),
            ResultType.Error => MessageBuilder.BuildErrorMessage(),
            _ => throw new KeyworderException($"No value configured for ResultType.{resultType}")
        };
    }

    private bool IsSaveButtonBusy(FormState formState)
    {
        return formState == FormState.Busy;
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        model.CategoryDropDownValue = value?.ToString();
        keywordsByCategory = GetKeywordsByCategory(model.CategoryDropDownValue);
    }

    private void OnKeywordDropDownValueChanged(object? value)
    {
        model.KeywordDropDownValue = value?.ToString();
        model.TextBoxValue = model.KeywordDropDownValue;
    }

    private async Task OnCreateKeyword(
        string? categoryDropDownValue,
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.CreateKeywordAsync(
            categoryDropDownValue,
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Created)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnDeleteKeyword(
        string? categoryDropDownValue,
        string? keywordDropDownValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(keywordDropDownValue))
            throw new ArgumentNullException(nameof(keywordDropDownValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.DeleteKeywordAsync(
            categoryDropDownValue,
            keywordDropDownValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Deleted)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnEditKeyword(
        string? categoryDropDownValue,
        string? keywordDropDownValue, 
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(keywordDropDownValue))
            throw new ArgumentNullException(nameof(keywordDropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.EditKeywordAsync(
            categoryDropDownValue, 
            keywordDropDownValue,
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Edited)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnSaveButtonClicked(
        ManageKeywordsModel model,
        ChangeMode changeMode)
    {
        switch (changeMode)
        {
            case ChangeMode.Create:
                await OnCreateKeyword(model.CategoryDropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Edit:
                await OnEditKeyword(model.CategoryDropDownValue, model.KeywordDropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Delete:
                await OnDeleteKeyword(model.CategoryDropDownValue, model.KeywordDropDownValue);
                break;
            default:
                throw new KeyworderException($"No action configured for ChangeMode.{changeMode}");
        }
    }

    private void OnKeywordTextChanged(object? value)
    {
        model.TextBoxValue = value?.ToString();
    }

    private void OnTabItemClicked(ChangeMode changeMode)
    {
        currentChangeMode = changeMode;
        ResetUserInput();
    }

    private async Task ResetForm()
    {
        allKeywords = await GetAllKeywords();
        ResetUserInput();
    }

    private void ResetUserInput()
    {
        // reinitializing the model would send the user back to the default tab
        model.CategoryDropDownValue = null;
        model.KeywordDropDownValue = null;
        model.TextBoxValue = null;
    }

    private void SetFormState(FormState formState)
    {
        currentFormState = formState;
    }
}
