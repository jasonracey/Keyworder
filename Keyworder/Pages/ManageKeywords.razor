@page "/manage-keywords"

<PageTitle>Manage Keywords</PageTitle>

@using Keyworder.Data
@using Keyworder.Utilities
@inject KeywordService _keywordService
@inject NotificationService _notificationService

<h2>Manage Keywords</h2>

<RadzenTemplateForm 
    Data=@_model 
    Submit=@(() => OnSaveButtonClicked(_model, _currentChangeMode))
    TItem="ManageKeywordsModel">
    <div class="row">
        <RadzenTabs 
            SelectedIndex="0">
            <Tabs>
                <RadzenTabsItem 
                    @onclick=@(() => OnTabItemClicked(ChangeMode.Create))
                    Text="Create Keyword">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown 
                                @bind-Value=@_model.CategoryDropDownValue 
                                Change=@(OnCategoryDropDownValueChanged)
                                Data=@GetCategories()
                                Name="CreateKeywordCategoryDropDown"
                                Placeholder="Select..." 
                                TValue="string" />
                            <RadzenRequiredValidator
                                Component="CreateKeywordCategoryDropDown"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox 
                                @bind-Value=@_model.TextBoxValue
                                MaxLength=50 
                                Name="CreateKeywordTextBox"
                                @oninput=@(args => OnKeywordTextChanged(args.Value)) 
                                Placeholder="Keyword..." />
                            <RadzenRequiredValidator
                                Component="CreateKeywordTextBox"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                </RadzenTabsItem>
                <RadzenTabsItem 
                    @onclick=@(() => OnTabItemClicked(ChangeMode.Edit))
                    Text="Edit Keyword">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Select" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown 
                                @bind-Value=@_model.CategoryDropDownValue
                                Change="@(OnCategoryDropDownValueChanged)"
                                Data=@GetCategories()
                                Name="EditKeywordCategoryDropDown"
                                Placeholder="Select..." 
                                TValue="string" />
                            <RadzenRequiredValidator
                                Component="EditKeywordCategoryDropDown"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Select" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown 
                                @bind-Value=@_model.KeywordDropDownValue
                                Change="@(OnKeywordDropDownValueChanged)"
                                Data=@_keywordsByCategory
                                Name="EditKeywordKeywordDropDown"
                                Placeholder="Select..." 
                                TValue="string" />
                            <RadzenRequiredValidator
                                Component="EditKeywordKeywordDropDown"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox 
                                @bind-Value=@_model.TextBoxValue 
                                MaxLength=50
                                Name="EditKeywordTextBox"
                                @oninput=@(args => OnKeywordTextChanged(args.Value))
                                Placeholder="Keyword..." />
                            <RadzenRequiredValidator
                                Component="EditKeywordTextBox"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                </RadzenTabsItem>
                <RadzenTabsItem 
                    @onclick=@(() => OnTabItemClicked(ChangeMode.Delete))
                    Text="Delete Keyword">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Select" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown 
                                @bind-Value=@_model.CategoryDropDownValue 
                                Change="@(OnCategoryDropDownValueChanged)" 
                                Data=@GetCategories() 
                                Name="DeleteKeywordCategoryDropDown"
                                Placeholder="Select..." 
                                TValue="string" />
                            <RadzenRequiredValidator
                                Component="DeleteKeywordCategoryDropDown"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel 
                                Text="Select" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown 
                                @bind-Value=@_model.KeywordDropDownValue 
                                Change="@(OnKeywordDropDownValueChanged)" 
                                Data=@GetKeywordsByCategory(_model.CategoryDropDownValue)
                                Name="DeleteKeywordKeywordDropDown"
                                Placeholder="Select..." 
                                TValue="string" />
                            <RadzenRequiredValidator
                                Component="DeleteKeywordKeywordDropDown"
                                Style="display:block"
                                Text="Value is required" />
                        </div>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
    <RadzenButton 
        BusyText=@GetSaveBusyText(_currentChangeMode)
        ButtonStyle=@GetSaveButtonStyle(_currentChangeMode)
        ButtonType="ButtonType.Submit"
        Icon=@GetSaveButtonIcon(_currentChangeMode)
        IsBusy=@IsSaveButtonBusy(_currentFormState)
        Text=@GetSaveButtonText(_currentChangeMode) />
    <RadzenNotification />
</RadzenTemplateForm>

@code {
    private List<Keyword> _allKeywords = new();
    private ChangeMode _currentChangeMode = ChangeMode.Create;
    private FormState _currentFormState = FormState.Idle;
    private List<string> _keywordsByCategory = new();
    private readonly ManageKeywordsModel _model = new();

    private class ManageKeywordsModel
    {
        private string? _textBoxValue;

        public string? CategoryDropDownValue { get; set; }

        public string? KeywordDropDownValue { get; set; }

        public string? TextBoxValue
        {
            get => _textBoxValue;
            // prevent white space from bypassing the required validator
            set => _textBoxValue = value?.Trim();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await _keywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private List<string> GetKeywordsByCategory(string? categoryDropDownValue)
    {
        return string.IsNullOrWhiteSpace(categoryDropDownValue)
            ? new List<string>()
            : _allKeywords
                .Where(keyword => keyword.IsCategory)
                .Where(keyword => keyword.Name.Equals(categoryDropDownValue, StringComparison.Ordinal))
                .SelectMany(parentKeyword => parentKeyword.Children.Select(childKeyword => childKeyword.Name))
                .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
                .ToList();
    }

    private static string GetSaveBusyText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Deleting..."
            : "Saving...";
    }

    private static string GetSaveButtonIcon(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "report"
            : "save";
    }

    private static ButtonStyle GetSaveButtonStyle(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? ButtonStyle.Danger
            : ButtonStyle.Info;
    }

    private static string GetSaveButtonText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Delete"
            : "Save";
    }

    private IEnumerable<string> GetCategories()
    {
        return _allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase);
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType switch
        {
            ResultType.Created => MessageBuilder.BuildCreatedMessage(EntityType.Keyword),
            ResultType.Deleted => MessageBuilder.BuildDeletedMessage(EntityType.Keyword),
            ResultType.Duplicate => MessageBuilder.BuildDuplicateMessage(EntityType.Keyword),
            ResultType.Edited => MessageBuilder.BuildEditedMessage(EntityType.Keyword),
            ResultType.Error => MessageBuilder.BuildErrorMessage(),
            _ => throw new KeyworderException($"No value configured for ResultType.{resultType}")
        };
    }

    private static bool IsSaveButtonBusy(FormState formState)
    {
        return formState == FormState.Busy;
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        _model.CategoryDropDownValue = value?.ToString();
        _keywordsByCategory = GetKeywordsByCategory(_model.CategoryDropDownValue);
    }

    private void OnKeywordDropDownValueChanged(object? value)
    {
        _model.KeywordDropDownValue = value?.ToString();
        _model.TextBoxValue = _model.KeywordDropDownValue;
    }

    private async Task OnCreateKeyword(
        string? categoryDropDownValue,
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await _keywordService.CreateKeywordAsync(
            categoryDropDownValue,
            textBoxValue);

        _notificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Created)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnDeleteKeyword(
        string? categoryDropDownValue,
        string? keywordDropDownValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(keywordDropDownValue))
            throw new ArgumentNullException(nameof(keywordDropDownValue));

        SetFormState(FormState.Busy);

        var resultType = await _keywordService.DeleteKeywordAsync(
            categoryDropDownValue,
            keywordDropDownValue);

        _notificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Deleted)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnEditKeyword(
        string? categoryDropDownValue,
        string? keywordDropDownValue, 
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(categoryDropDownValue))
            throw new ArgumentNullException(nameof(categoryDropDownValue));
        if (string.IsNullOrWhiteSpace(keywordDropDownValue))
            throw new ArgumentNullException(nameof(keywordDropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await _keywordService.EditKeywordAsync(
            categoryDropDownValue, 
            keywordDropDownValue,
            textBoxValue);

        _notificationService.Notify(GetNotificationMessage(resultType));

        if (resultType == ResultType.Edited)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnSaveButtonClicked(
        ManageKeywordsModel model,
        ChangeMode changeMode)
    {
        switch (changeMode)
        {
            case ChangeMode.Create:
                await OnCreateKeyword(model.CategoryDropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Edit:
                await OnEditKeyword(model.CategoryDropDownValue, model.KeywordDropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Delete:
                await OnDeleteKeyword(model.CategoryDropDownValue, model.KeywordDropDownValue);
                break;
            default:
                throw new KeyworderException($"No action configured for ChangeMode.{changeMode}");
        }
    }

    private void OnKeywordTextChanged(object? value)
    {
        _model.TextBoxValue = value?.ToString();
    }

    private void OnTabItemClicked(ChangeMode changeMode)
    {
        _currentChangeMode = changeMode;
        ResetUserInput();
    }

    private async Task ResetForm()
    {
        _allKeywords = await GetAllKeywords();
        ResetUserInput();
    }

    private void ResetUserInput()
    {
        // reinitializing the model would send the user back to the default tab
        _model.CategoryDropDownValue = null;
        _model.KeywordDropDownValue = null;
        _model.TextBoxValue = null;
    }

    private void SetFormState(FormState formState)
    {
        _currentFormState = formState;
    }
}
