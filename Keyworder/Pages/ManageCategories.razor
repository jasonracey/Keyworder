@page "/manage-categories"

<PageTitle>Manage Categories</PageTitle>

@using Keyworder.Data
@using Keyworder.Utilities
@inject KeywordService KeywordService
@inject NotificationService NotificationService

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <RadzenFieldset Text="Manage Categories">
            <RadzenTabs SelectedIndex="0">
                <Tabs>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Create))
                        Text="Create Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Name" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox 
                                    @bind-Value=@textBoxValue 
                                    MaxLength=50 
                                    @oninput=@(args => OnCreateCategoryTextChanged(args?.Value)) 
                                    Placeholder="Category..." />
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Edit))
                        Text="Edit Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Select" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown 
                                    @bind-Value=@dropDownValue
                                    Change=@(value => OnEditCategoryDropDownValueChanged(value)) 
                                    Data=@GetCategories() 
                                    Placeholder="Select..." 
                                    TValue="string" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Name" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox 
                                    @bind-Value=@textBoxValue 
                                    MaxLength=50 
                                    @oninput=@(args => OnCreateCategoryTextChanged(args?.Value)) 
                                    Placeholder="Category..." />
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Delete))
                        Text="Delete Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Select" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown 
                                    @bind-Value=@dropDownValue
                                    Change=@(value => OnDeleteCategoryDropDownValueChanged(value)) 
                                    Data=@GetCategories() 
                                    Placeholder="Select..." 
                                    TValue="string" />
                            </div>
                        </div>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
            <RadzenButton 
                BusyText=@GetSaveBusyText(currentChangeMode)
                ButtonStyle=@GetSaveButtonStyle(currentChangeMode)
                Click=@(() => OnSaveButtonClicked(currentChangeMode, dropDownValue, textBoxValue))
                Disabled=@IsSaveButtonDisabled(currentChangeMode, dropDownValue, textBoxValue)
                Icon=@GetSaveButtonIcon(currentChangeMode)
                IsBusy=@IsSaveButtonBusy(currentFormState)
                Text=@GetSaveButtonText(currentChangeMode) />
            <RadzenNotification />
        </RadzenFieldset>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private ChangeMode currentChangeMode = ChangeMode.Create;
    private FormState currentFormState = FormState.Idle;
    private string? dropDownValue = null;
    private string? textBoxValue = null;   

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private string GetSaveBusyText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Deleting..."
            : "Saving...";
    }

    private string GetSaveButtonIcon(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "report"
            : "save";
    }

    private ButtonStyle GetSaveButtonStyle(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? ButtonStyle.Danger
            : ButtonStyle.Info;
    }

    private string GetSaveButtonText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Delete"
            : "Save";
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType switch
        {
            ResultType.Created => MessageBuilder.BuildCreatedMessage(EntityType.Category),
            ResultType.Deleted => MessageBuilder.BuildDeletedMessage(EntityType.Category),
            ResultType.Duplicate => MessageBuilder.BuildDuplicateMessage(EntityType.Category),
            ResultType.Edited => MessageBuilder.BuildEditedMessage(EntityType.Category),
            ResultType.Error => MessageBuilder.BuildErrorMessage(),
            _ => throw new KeyworderException($"No value configured for ResultType.{resultType}")
        };
    }

    private bool IsSaveButtonDisabledForCreate(string? textBoxValue)
    {
        return string.IsNullOrWhiteSpace(textBoxValue);
    }

    private bool IsSaveButtonDisabledForDelete(string? dropDownValue)
    {
        return string.IsNullOrWhiteSpace(dropDownValue);
    }

    private bool IsSaveButtonDisabledForEdit(string? dropDownValue, string? textBoxValue)
    {
        return 
            string.IsNullOrWhiteSpace(textBoxValue) ||
            (
                dropDownValue != null && 
                dropDownValue.Equals(textBoxValue, StringComparison.Ordinal)
            );
    }

    private bool IsSaveButtonBusy(FormState formState)
    {
        return formState == FormState.Busy;
    }

    private bool IsSaveButtonDisabled(
        ChangeMode changeMode,
        string? dropDownValue,
        string? textBoxValue)
    {
        return changeMode switch
        {
            ChangeMode.Create => IsSaveButtonDisabledForCreate(textBoxValue),
            ChangeMode.Edit => IsSaveButtonDisabledForEdit(dropDownValue, textBoxValue),
            ChangeMode.Delete => IsSaveButtonDisabledForDelete(dropDownValue),
            _ => throw new KeyworderException($"No value configured for ChangeMode.{changeMode}")
        };
    }

    private bool IsSpecifyCategoryToEditDisabled(string dropDownValue)
    {
        return string.IsNullOrWhiteSpace(dropDownValue);
    }

    private async Task OnCreateCategory(string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.CreateCategoryAsync(
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private void OnCreateCategoryTextChanged(object? value)
    {
        textBoxValue = value?.ToString();
    }

    private async Task OnDeleteCategory(string? dropDownValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.DeleteCategoryAsync(
            dropDownValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private void OnDeleteCategoryDropDownValueChanged(object? value)
    {
        dropDownValue = value?.ToString();
    }

    private async Task OnEditCategory(
        string? dropDownValue, 
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.EditCategoryAsync(
            dropDownValue, 
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private void OnEditCategoryDropDownValueChanged(object? value)
    {
        dropDownValue = value?.ToString();
        textBoxValue = dropDownValue;
    }

    private void OnEditCategoryTextChanged(object? value)
    {
        textBoxValue = value?.ToString();
    }

    private async Task OnSaveButtonClicked(
        ChangeMode changeMode,
        string? dropDownValue,
        string? textBoxValue)
    {
        switch (changeMode)
        {
            case ChangeMode.Create:
                await OnCreateCategory(textBoxValue);
                break;
            case ChangeMode.Edit:
                await OnEditCategory(dropDownValue, textBoxValue);
                break;
            case ChangeMode.Delete:
                await OnDeleteCategory(dropDownValue);
                break;
            default:
                throw new KeyworderException($"No action configured for ChangeMode.{changeMode}");
        }
    }

    private void OnTabItemClicked(ChangeMode changeMode)
    {
        currentChangeMode = changeMode;
        ResetUserInput();
    }

    private async Task ResetForm()
    {
        allKeywords = await GetAllKeywords();
        ResetUserInput();
    }

    private void ResetUserInput()
    {
        dropDownValue = null;
        textBoxValue = null;
    }

    private void SetFormState(FormState formState)
    {
        currentFormState = formState;
    }
}