@page "/manage-categories"

<PageTitle>Manage Categories</PageTitle>

@using Keyworder.Data
@using Keyworder.Utilities
@inject KeywordService KeywordService
@inject NotificationService NotificationService

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <RadzenTemplateForm 
        Data=@model 
        Submit=@(() => OnSaveButtonClicked(model, currentChangeMode))
        TItem="ManageCategoriesModel">
        <div class="row">
            <RadzenFieldset 
                Text="Manage Categories">
                <RadzenTabs 
                    SelectedIndex="0">
                    <Tabs>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Create))
                            Text="Create Category">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel
                                        Text="Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox
                                        @bind-Value=@model.TextBoxValue 
                                        MaxLength=50 
                                        Name="CreateCategoryTextBox"
                                        @oninput=@(args => OnCategoryTextChanged(args?.Value)) 
                                        Placeholder="Category..." />
                                    <RadzenRequiredValidator
                                        Component="CreateCategoryTextBox"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Edit))
                            Text="Edit Category">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.DropDownValue
                                        Change=@(value => OnEditCategoryDropDownValueChanged(value)) 
                                        Data=@GetCategories() 
                                        Name="EditCategoryDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="EditCategoryDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox 
                                        @bind-Value=@model.TextBoxValue 
                                        MaxLength=50 
                                        Name="EditCategoryTextBox"
                                        @oninput=@(args => OnCategoryTextChanged(args?.Value)) 
                                        Placeholder="Category..." />
                                    <RadzenRequiredValidator
                                        Component="EditCategoryTextBox"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem 
                            @onclick=@(() => OnTabItemClicked(ChangeMode.Delete))
                            Text="Delete Category">
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel 
                                        Text="Select" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown 
                                        @bind-Value=@model.DropDownValue
                                        Change=@(value => OnDeleteCategoryDropDownValueChanged(value)) 
                                        Data=@GetCategories() 
                                        Name="DeleteCategoryDropDown"
                                        Placeholder="Select..." 
                                        TValue="string" />
                                    <RadzenRequiredValidator
                                        Component="DeleteCategoryDropDown"
                                        Style="display:block"
                                        Text="Value is required" />
                                </div>
                            </div>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
                <RadzenButton 
                    BusyText=@GetSaveBusyText(currentChangeMode)
                    ButtonStyle=@GetSaveButtonStyle(currentChangeMode)
                    ButtonType="ButtonType.Submit"
                    Icon=@GetSaveButtonIcon(currentChangeMode)
                    IsBusy=@IsSaveButtonBusy(currentFormState)
                    Text=@GetSaveButtonText(currentChangeMode) />
                <RadzenNotification />
            </RadzenFieldset>
        </div>
    </RadzenTemplateForm>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private ChangeMode currentChangeMode = ChangeMode.Create;
    private FormState currentFormState = FormState.Idle;
    private ManageCategoriesModel model = new ManageCategoriesModel();

    private class ManageCategoriesModel
    {
        private string? textBoxValue;

        public string? DropDownValue { get; set; }
        public string? TextBoxValue
        {
            get => textBoxValue;
            // prevent white space from bypassing required validator
            set => textBoxValue = value?.Trim();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private string GetSaveBusyText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Deleting..."
            : "Saving...";
    }

    private string GetSaveButtonIcon(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "report"
            : "save";
    }

    private ButtonStyle GetSaveButtonStyle(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? ButtonStyle.Danger
            : ButtonStyle.Info;
    }

    private string GetSaveButtonText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Delete"
            : "Save";
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType switch
        {
            ResultType.Created => MessageBuilder.BuildCreatedMessage(EntityType.Category),
            ResultType.Deleted => MessageBuilder.BuildDeletedMessage(EntityType.Category),
            ResultType.Duplicate => MessageBuilder.BuildDuplicateMessage(EntityType.Category),
            ResultType.Edited => MessageBuilder.BuildEditedMessage(EntityType.Category),
            ResultType.Error => MessageBuilder.BuildErrorMessage(),
            _ => throw new KeyworderException($"No value configured for ResultType.{resultType}")
        };
    }

    private bool IsSaveButtonBusy(FormState formState)
    {
        return formState == FormState.Busy;
    }

    private void OnCategoryTextChanged(object? value)
    {
        model.TextBoxValue = value?.ToString();
    }

    private async Task OnCreateCategory(string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.CreateCategoryAsync(
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnDeleteCategory(string? dropDownValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.DeleteCategoryAsync(
            dropDownValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private void OnDeleteCategoryDropDownValueChanged(object? value)
    {
        model.DropDownValue = value?.ToString();
    }

    private async Task OnEditCategory(
        string? dropDownValue, 
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var resultType = await this.KeywordService.EditCategoryAsync(
            dropDownValue, 
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(resultType));

        await ResetForm();

        SetFormState(FormState.Idle);
    }

    private void OnEditCategoryDropDownValueChanged(object? value)
    {
        model.DropDownValue = value?.ToString();
        model.TextBoxValue = model.DropDownValue;
    }

    private void OnEditCategoryTextChanged(object? value)
    {
        model.TextBoxValue = value?.ToString();
    }

    private async Task OnSaveButtonClicked(
        ManageCategoriesModel model,
        ChangeMode changeMode)
    {
        switch (currentChangeMode)
        {
            case ChangeMode.Create:
                await OnCreateCategory(model.TextBoxValue);
                break;
            case ChangeMode.Edit:
                await OnEditCategory(model.DropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Delete:
                await OnDeleteCategory(model.DropDownValue);
                break;
            default:
                throw new KeyworderException($"No action configured for ChangeMode.{currentChangeMode}");
        }
    }

    private void OnTabItemClicked(ChangeMode changeMode)
    {
        currentChangeMode = changeMode;
        ResetUserInput();
    }

    private async Task ResetForm()
    {
        allKeywords = await GetAllKeywords();
        ResetUserInput();
    }

    private void ResetUserInput()
    {
        // reinitializing the model would send the user back to the default tab
        model.DropDownValue = null;
        model.TextBoxValue = null;
    }

    private void SetFormState(FormState formState)
    {
        currentFormState = formState;
    }
}