@page "/manage-categories"

<PageTitle>Manage Categories</PageTitle>

@using Keyworder.Data
@using Keyworder.Utilities
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<h2>Manage Categories</h2>

@if (!_allKeywords.Any())
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <RadzenTemplateForm 
        Data=@_model 
        Submit=@(() => OnSaveButtonClicked(_model))
        TItem="ManageCategoriesModel">
        <div class="row">
            <RadzenTabs 
                SelectedIndex="0">
                <Tabs>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Create))
                        Text="Create Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel
                                    Text="Name" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox
                                    @bind-Value=@_model.TextBoxValue 
                                    MaxLength=50 
                                    Name="CreateCategoryTextBox"
                                    @oninput=@(args => OnCategoryTextChanged(args.Value)) 
                                    Placeholder="Category..." />
                                <RadzenRequiredValidator
                                    Component="CreateCategoryTextBox"
                                    Style="display:block"
                                    Text="Value is required" />
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Edit))
                        Text="Edit Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Select" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown 
                                    @bind-Value=@_model.DropDownValue
                                    Change=@(OnCategoryDropDownValueChanged) 
                                    Data=@GetCategories() 
                                    Name="EditCategoryDropDown"
                                    Placeholder="Select..." 
                                    TValue="string" />
                                <RadzenRequiredValidator
                                    Component="EditCategoryDropDown"
                                    Style="display:block"
                                    Text="Value is required" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Name" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox 
                                    @bind-Value=@_model.TextBoxValue 
                                    MaxLength=50 
                                    Name="EditCategoryTextBox"
                                    @oninput=@(args => OnCategoryTextChanged(args.Value)) 
                                    Placeholder="Category..." />
                                <RadzenRequiredValidator
                                    Component="EditCategoryTextBox"
                                    Style="display:block"
                                    Text="Value is required" />
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem 
                        @onclick=@(() => OnTabItemClicked(ChangeMode.Delete))
                        Text="Delete Category">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel 
                                    Text="Select" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown 
                                    @bind-Value=@_model.DropDownValue
                                    Change=@(OnCategoryDropDownValueChanged) 
                                    Data=@GetCategories() 
                                    Name="DeleteCategoryDropDown"
                                    Placeholder="Select..." 
                                    TValue="string" />
                                <RadzenRequiredValidator
                                    Component="DeleteCategoryDropDown"
                                    Style="display:block"
                                    Text="Value is required" />
                            </div>
                        </div>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
        <RadzenButton 
            BusyText=@GetSaveBusyText(_currentChangeMode)
            ButtonStyle=@GetSaveButtonStyle(_currentChangeMode)
            ButtonType="ButtonType.Submit"
            Icon=@GetSaveButtonIcon(_currentChangeMode)
            IsBusy=@IsSaveButtonBusy(_currentFormState)
            Text=@GetSaveButtonText(_currentChangeMode) />
        <RadzenNotification />
    </RadzenTemplateForm>
}

@code {
    private List<Keyword> _allKeywords = new();
    private ChangeMode _currentChangeMode = ChangeMode.Create;
    private FormState _currentFormState = FormState.Idle;
    private readonly ManageCategoriesModel _model = new();

    private class ManageCategoriesModel
    {
        private string? _textBoxValue;

        public string? DropDownValue { get; set; }

        public string? TextBoxValue
        {
            get => _textBoxValue;
            // prevent white space from bypassing the required validator
            set => _textBoxValue = value?.Trim();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private static string GetSaveBusyText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Deleting..."
            : "Saving...";
    }

    private static string GetSaveButtonIcon(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "report"
            : "save";
    }

    private static ButtonStyle GetSaveButtonStyle(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? ButtonStyle.Danger
            : ButtonStyle.Info;
    }

    private static string GetSaveButtonText(ChangeMode changeMode)
    {
        return changeMode == ChangeMode.Delete
            ? "Delete"
            : "Save";
    }

    private IEnumerable<string> GetCategories()
    {
        return _allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase);
    }

    private static NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType switch
        {
            ResultType.Created => MessageBuilder.BuildCreatedMessage(EntityType.Category),
            ResultType.Deleted => MessageBuilder.BuildDeletedMessage(EntityType.Category),
            ResultType.Duplicate => MessageBuilder.BuildDuplicateMessage(EntityType.Category),
            ResultType.Edited => MessageBuilder.BuildEditedMessage(EntityType.Category),
            ResultType.Error => MessageBuilder.BuildErrorMessage(),
            _ => throw new KeyworderException($"No value configured for ResultType.{resultType}")
        };
    }

    private static bool IsSaveButtonBusy(FormState formState)
    {
        return formState == FormState.Busy;
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        _model.DropDownValue = value?.ToString();
        _model.TextBoxValue = _model.DropDownValue;
    }

    private void OnCategoryTextChanged(object? value)
    {
        _model.TextBoxValue = value?.ToString();
    }

    private async Task OnCreateCategory(string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var keywordResult = await KeywordService.CreateCategoryAsync(
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(keywordResult.ResultType));

        if (keywordResult.ResultType == ResultType.Created)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnDeleteCategory(string? dropDownValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));

        SetFormState(FormState.Busy);

        var keywordResult = await KeywordService.DeleteCategoryAsync(
            dropDownValue);

        NotificationService.Notify(GetNotificationMessage(keywordResult.ResultType));

        if (keywordResult.ResultType == ResultType.Deleted)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnEditCategory(
        string? dropDownValue, 
        string? textBoxValue)
    {
        if (string.IsNullOrWhiteSpace(dropDownValue))
            throw new ArgumentNullException(nameof(dropDownValue));
        if (string.IsNullOrWhiteSpace(textBoxValue))
            throw new ArgumentNullException(nameof(textBoxValue));

        SetFormState(FormState.Busy);

        var keywordResult = await KeywordService.EditCategoryAsync(
            dropDownValue, 
            textBoxValue);

        NotificationService.Notify(GetNotificationMessage(keywordResult.ResultType));

        if (keywordResult.ResultType == ResultType.Edited)
            await ResetForm();

        SetFormState(FormState.Idle);
    }

    private async Task OnSaveButtonClicked(ManageCategoriesModel model)
    {
        switch (_currentChangeMode)
        {
            case ChangeMode.Create:
                await OnCreateCategory(model.TextBoxValue);
                break;
            case ChangeMode.Edit:
                await OnEditCategory(model.DropDownValue, model.TextBoxValue);
                break;
            case ChangeMode.Delete:
                await OnDeleteCategory(model.DropDownValue);
                break;
            case ChangeMode.None:
            default:
                throw new KeyworderException($"No action configured for ChangeMode.{_currentChangeMode}");
        }
    }

    private void OnTabItemClicked(ChangeMode changeMode)
    {
        _currentChangeMode = changeMode;
        ResetUserInput();
    }

    private async Task ResetForm()
    {
        _allKeywords = await GetAllKeywords();
        ResetUserInput();
    }

    private void ResetUserInput()
    {
        // reinitializing the model would send the user back to the default tab
        _model.DropDownValue = null;
        _model.TextBoxValue = null;
    }

    private void SetFormState(FormState formState)
    {
        _currentFormState = formState;
    }
}