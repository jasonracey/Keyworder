@page "/edit-category"

<PageTitle>Edit Category</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<div class="row">
    <div class="col">
        <h2>Edit Category</h2>
    </div>
</div>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <RadzenDropDown 
                @bind-Value=@selectedCategory 
                Change=@(value => OnCategoryDropDownValueChanged(value)) 
                Data=@GetCategories() 
                Placeholder="Select..." 
                TValue="string" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenTextBox 
                @bind-Value=@specifiedCategory 
                Disabled=@IsSpecifyCategoryDisabled() 
                MaxLength=50 
                @oninput=@(args => OnCategoryTextChanged(args?.Value)) 
                Placeholder="Category..." />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton 
                BusyText="Saving..." 
                Click=@OnSaveCategoryClicked 
                Disabled=@IsSaveCategoryButtonDisabled() 
                Icon="save" 
                IsBusy=@isCategorySaveBusy 
                style="width: 160px" 
                Text="Save" />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private bool isCategorySaveBusy = false;
    private string? selectedCategory = null;
    private string? specifiedCategory = null;

    private static readonly NotificationMessage duplicateCategoryMessage = new NotificationMessage 
    { 
        Detail = "Category already exists", 
        Duration = 2000,
        Severity = NotificationSeverity.Warning, 
        Summary = "Duplicate"
    };

    private static readonly NotificationMessage savedCategoryMessage = new NotificationMessage 
    { 
        Detail = "Category saved successfully", 
        Duration = 2000,
        Severity = NotificationSeverity.Success, 
        Summary = "Success"
    };

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType == ResultType.Success 
            ? savedCategoryMessage 
            : duplicateCategoryMessage;
    }

    private bool IsSaveCategoryButtonDisabled()
    {
        return 
            string.IsNullOrWhiteSpace(specifiedCategory) ||
            (
                selectedCategory != null && 
                selectedCategory.Equals(specifiedCategory, StringComparison.Ordinal)
            );
    }

    private bool IsSpecifyCategoryDisabled()
    {
        return string.IsNullOrWhiteSpace(selectedCategory);
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        selectedCategory = value?.ToString();
        specifiedCategory = selectedCategory;
    }

    private void OnCategoryTextChanged(object? value)
    {
        specifiedCategory = value?.ToString();
    }

    private async Task OnSaveCategoryClicked()
    {
        isCategorySaveBusy = true;

        var resultType = await this.KeywordService.EditCategoryAsync(
            selectedCategory, 
            specifiedCategory);
        
        NotificationService.Notify(GetNotificationMessage(resultType));

        allKeywords = await GetAllKeywords();

        selectedCategory = null;
        specifiedCategory = null;
        isCategorySaveBusy = false;
    }
}