@page "/delete-keyword"

<PageTitle>Delete Keyword</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<div class="row">
    <div class="col">
        <h2>Delete Keyword</h2>
    </div>
</div>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <RadzenLabel 
                Text="Category" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenDropDown 
                @bind-Value=@selectedCategory 
                Change=@(value => OnCategoryDropDownValueChanged(value)) 
                Data=@GetCategories() 
                Placeholder="Select..." 
                TValue="string" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenDropDown 
                @bind-Value=@selectedKeyword Change=@(value => OnKeywordDropDownValueChanged(value)) 
                Data=@GetKeywords(@selectedCategory) 
                Disabled=@IsKeywordDropDownDisabled() 
                Placeholder="Select..." 
                TValue="string" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton 
                BusyText="Deleting..." 
                Click=@OnDeleteKeywordClicked 
                Disabled=@IsDeleteKeywordButtonDisabled() 
                Icon="save" 
                IsBusy=@isKeywordDeleteBusy 
                style="width: 160px" 
                Text="Delete" />
        </div>
        <div class="col">
            <RadzenNotification />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private bool isKeywordDeleteBusy = false;
    private string? selectedCategory = null;
    private string? selectedKeyword = null;

    private static readonly NotificationMessage deleteKeywordMessage = new NotificationMessage 
    { 
        Detail = "Keyword deleted successfully", 
        Duration = 2000,
        Severity = NotificationSeverity.Success, 
        Summary = "Success"
    };

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private List<string> GetKeywords(string? category)
    {
        return string.IsNullOrWhiteSpace(category)
            ? new List<string>()
            : allKeywords
                .Where(keyword => keyword.IsCategory)
                .Where(keyword => keyword.Name.Equals(category, StringComparison.Ordinal))
                .SelectMany(parentKeyword => parentKeyword.Children.Select(childKeyword => childKeyword.Name))
                .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
                .ToList();
    }

    private bool IsDeleteKeywordButtonDisabled()
    {
        return 
            string.IsNullOrWhiteSpace(selectedCategory) || 
            string.IsNullOrWhiteSpace(selectedKeyword);
    }

    private bool IsKeywordDropDownDisabled()
    {
        return string.IsNullOrWhiteSpace(selectedCategory);
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        selectedCategory = value?.ToString();
    }

    private void OnKeywordDropDownValueChanged(object? value)
    {
        selectedKeyword = value?.ToString();
    }

    private async Task OnDeleteKeywordClicked()
    {
        isKeywordDeleteBusy = true;

        var resultType = await this.KeywordService.DeleteKeywordAsync(
            selectedCategory, 
            selectedKeyword);

        NotificationService.Notify(deleteKeywordMessage);

        allKeywords = await GetAllKeywords();

        selectedCategory = null;
        selectedKeyword = null;
        isKeywordDeleteBusy = false;
    }
}