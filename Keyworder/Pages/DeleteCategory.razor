@page "/delete-category"

<PageTitle>Delete Category</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService

<div class="row">
    <div class="col">
        <RadzenLabel Text="Category" />
    </div>
</div>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <RadzenDropDown TValue="string" Placeholder="Select..." Data=@GetCategories() @bind-Value=@selectedCategory Change=@(value => OnCategoryDropDownValueChanged(value)) />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton style="width: 160px" Icon="save" BusyText="Deleting..." IsBusy=@isCategoryDeleteBusy Click=@OnDeleteCategoryClicked Text="Delete" Disabled=@IsDeleteCategoryButtonDisabled() />
            <RadzenLabel Text=@resultMessage Visible=@isCategoryDeletedVisible />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private bool isCategoryDeletedVisible = false;
    private bool isCategoryDeleteBusy = false;
    private string? resultMessage = null;
    private string? selectedCategory = null;

    protected override async Task OnInitializedAsync()
    {
        allKeywords = (await KeywordService.GetKeywordsAsync()).ToList();
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private bool IsDeleteCategoryButtonDisabled()
    {
        return string.IsNullOrWhiteSpace(selectedCategory);
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        selectedCategory = value?.ToString();
        isCategoryDeletedVisible = false;
    }

    private async Task OnDeleteCategoryClicked()
    {
        isCategoryDeleteBusy = true;

        var resultType = await this.KeywordService.DeleteCategoryAsync(selectedCategory);

        // todo: result status bar or whatever
        allKeywords = (await KeywordService.GetKeywordsAsync()).ToList();
        selectedCategory = null;
        resultMessage = resultType.ToString();
        isCategoryDeletedVisible = true;
        isCategoryDeleteBusy = false;
    }
}