@page "/create-category"

<PageTitle>Create Category</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<div class="row">
    <div class="col">
        <h2>Create Category</h2>
    </div>
</div>
<div class="row">
    <div class="col">
        <RadzenTextBox 
            @bind-Value=@specifiedCategory 
            MaxLength=50 
            @oninput=@(args => OnCategoryTextChanged(args?.Value)) 
            Placeholder="Category..." />
    </div>
</div>
<div class="row">
    <div class="col">
        <RadzenButton 
            BusyText="Saving..." 
            Click=@OnSaveCategoryClicked 
            Disabled=@IsSaveCategoryButtonDisabled() 
            Icon="save" 
            IsBusy=@isCategorySaveBusy 
            style="width: 160px" 
            Text="Save" />
    </div>
    <div class="col">
        <RadzenNotification />
    </div>
</div>

@code {
    private bool isCategorySaveBusy = false;
    private string? specifiedCategory = null;

    private static readonly NotificationMessage duplicateCategoryMessage = new NotificationMessage 
    { 
        Detail = "Category already exists", 
        Duration = 2000,
        Severity = NotificationSeverity.Warning, 
        Summary = "Duplicate"
    };

    private static readonly NotificationMessage savedCategoryMessage = new NotificationMessage 
    { 
        Detail = "Category saved successfully", 
        Duration = 2000,
        Severity = NotificationSeverity.Success, 
        Summary = "Success"
    };

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType == ResultType.Success 
            ? savedCategoryMessage 
            : duplicateCategoryMessage;
    }

    private bool IsSaveCategoryButtonDisabled()
    {
        return string.IsNullOrWhiteSpace(specifiedCategory);
    }

    private void OnCategoryTextChanged(object? value)
    {
        specifiedCategory = value?.ToString();
    }

    private async Task OnSaveCategoryClicked()
    {
        isCategorySaveBusy = true;

        var resultType = await this.KeywordService.CreateCategoryAsync(
            specifiedCategory);
    
        NotificationService.Notify(GetNotificationMessage(resultType));

        specifiedCategory = null;
        isCategorySaveBusy = false;
    }
}