@page "/keywords"

<PageTitle>Keywords</PageTitle>

@using Excubo.Blazor.TreeViews
@using Keyworder.Data
@using Keyworder.Utilities
@inject ClipboardService ClipboardService
@inject KeywordService KeywordService

<h1>Keywords</h1>

@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <td>
                <TreeView @key="SelectedItems" Items="Items" InitiallyCollapsed="true" AllowSelection="true" GetChildren="(item) => item.Children" @bind-SelectedItems="SelectedItems">
                    <ItemTemplate>
                        @context.Item.Self
                    </ItemTemplate>
                </TreeView>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <button @onclick="@(() => ClearSelectedItems())">
                        Clear
                    </button>
                </div>
            </td>
            <td>
                <div>
                    <button @onclick="@(() => CopyToClipboard(ToFlickrTagsString(SelectedItems)))">
                        Copy
                    </button>
                </div>
            </td>
        </tr>
    </table>
}

@code {
    private List<Item> Items = null!;
    private List<Item> SelectedItems = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        // todo: turn categories into a tree structure to bind without mapping
        var categories = await KeywordService.GetCategoriesAsync();
        Items = BuildItems(categories);
    }

    private List<Item> BuildItems(IEnumerable<Category> categories)
    {
        return categories
            .Select(category => BuildItem(category))
            .ToList();
    }

    private Item BuildItem(Category category)
    {
        return new Item
        {
            Self = category.CategoryId,
            Children = category.Keywords
                .Select(keyword => BuildItem(keyword))
                .ToList()
        };
    }

    private Item BuildItem(Keyword keyword)
    {
        return new Item 
        { 
            Self = keyword.KeywordId 
        };
    }

    private void ClearSelectedItems()
    {
        SelectedItems = new List<Item>();
    }

    private async Task CopyToClipboard(string input)
    {
        await ClipboardService.WriteTextAsync(input);
    }

    private string ToFlickrTagsString(IEnumerable<Item> items)
    {
        var values = items
            .Where(item => item.Children == null)
            .Select(item => item.Self);

        return TagService.ToFlickrTagsString(values);
    }

    private class Item
    {
        public string Self { get; set; } = null!;
        public List<Item> Children { get; set; } = null!;
    }
}