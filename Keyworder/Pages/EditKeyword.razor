@page "/edit-keyword"

<PageTitle>Edit Keyword</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService
@inject NotificationService NotificationService

<div class="row">
    <div class="col">
        <h2>Edit Keyword</h2>
    </div>
</div>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <RadzenLabel 
                Text="Category" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenDropDown 
                @bind-Value=@selectedCategory
                Change=@(value => OnCategoryDropDownValueChanged(value))
                Data=@GetCategories() 
                Placeholder="Select..." 
                TValue="string" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenDropDown 
                @bind-Value=@selectedKeyword
                Change=@(value => OnKeywordDropDownValueChanged(value))
                Data=@selectedCategoryKeywords 
                Disabled=@IsSelectKeywordDisabled() 
                Placeholder="Select..." 
                TValue="string" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenTextBox 
                @bind-Value=@specifiedKeyword 
                Disabled=@IsSpecifyKeywordDisabled() 
                MaxLength=50 
                @oninput=@(args => OnKeywordTextChanged(args?.Value))
                Placeholder="Keyword..." />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton
                BusyText="Saving..." 
                Click=@OnSaveKeywordClicked
                Disabled=@IsSaveKeywordButtonDisabled()
                Icon="save" 
                IsBusy=@isKeywordSaveBusy 
                style="width: 160px"
                Text="Save" />
        </div>
        <div class="col">
            <RadzenNotification />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private bool isKeywordSaveBusy = false;
    private string? selectedCategory = null;
    private List<string> selectedCategoryKeywords = new List<string>();
    private string? selectedKeyword = null;
    private string? specifiedKeyword = null;

    private static readonly NotificationMessage duplicateKeywordMessage = new NotificationMessage 
    { 
        Detail = "Keyword already exists in this category", 
        Duration = 2000,
        Severity = NotificationSeverity.Warning, 
        Summary = "Duplicate"
    };

    private static readonly NotificationMessage savedKeywordMessage = new NotificationMessage 
    { 
        Detail = "Keyword saved successfully", 
        Duration = 2000,
        Severity = NotificationSeverity.Success, 
        Summary = "Success"
    };

    protected override async Task OnInitializedAsync()
    {
        allKeywords = await GetAllKeywords();
    }

    private async Task<List<Keyword>> GetAllKeywords()
    {
        var keywordsEnumerable = await KeywordService.GetKeywordsAsync();
        return keywordsEnumerable.ToList();
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(keyword => keyword.IsCategory)
            .Select(keyword => keyword.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private NotificationMessage GetNotificationMessage(ResultType resultType)
    {
        return resultType == ResultType.Success 
            ? savedKeywordMessage 
            : duplicateKeywordMessage;
    }

    private List<string> GetSelectedCategoryKeywords(string categoryName)
    {
        return allKeywords
            .First(keyword => keyword.Name.Equals(categoryName, StringComparison.Ordinal)).Children
            .Select(keyword => keyword.Name)
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private bool IsSaveKeywordButtonDisabled()
    {
        return 
            string.IsNullOrWhiteSpace(specifiedKeyword) ||
            (
                selectedKeyword != null && 
                selectedKeyword.Equals(specifiedKeyword, StringComparison.Ordinal)
            );
    }

    private bool IsSelectKeywordDisabled()
    {
        return string.IsNullOrWhiteSpace(selectedCategory);
    }

    private bool IsSpecifyKeywordDisabled()
    {
        return string.IsNullOrWhiteSpace(selectedKeyword);
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        selectedCategory = value?.ToString();
        selectedCategoryKeywords = selectedCategory != null
            ? GetSelectedCategoryKeywords(selectedCategory)
            : new List<string>();
        selectedKeyword = null;
        specifiedKeyword = null;
    }

    private void OnKeywordDropDownValueChanged(object? value)
    {
        selectedKeyword = value?.ToString();
        specifiedKeyword = selectedKeyword;
    }

    private void OnKeywordTextChanged(object? value)
    {
        specifiedKeyword = value?.ToString();
    }

    private async Task OnSaveKeywordClicked()
    {
        isKeywordSaveBusy = true;

        var resultType = await this.KeywordService.EditKeywordAsync(
            selectedCategory, 
            selectedKeyword, 
            specifiedKeyword);

        NotificationService.Notify(GetNotificationMessage(resultType));

        allKeywords = await GetAllKeywords();

        selectedCategory = null;
        selectedKeyword = null;
        specifiedKeyword = null;
        isKeywordSaveBusy = false;
    }
}