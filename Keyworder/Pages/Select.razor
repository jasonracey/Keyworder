@page "/select"

<PageTitle>Select Keywords</PageTitle>

@using Excubo.Blazor.TreeViews
@using Keyworder.Data
@using Keyworder.Utilities
@inject ClipboardService ClipboardService
@inject KeywordService KeywordService

<h2>Select Keywords</h2>

@if (AllKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <form>
        <div class="row">
            <div class="col">
                 <TreeView @key="SelectedKeywords" Items="AllKeywords" InitiallyCollapsed="true" AllowSelection="true" ItemClass="tree-item" GetChildren="(keywords) => keywords.Keywords" SortBy="(keywords) => keywords.OrderBy(keyword => keyword.Name)" @bind-SelectedItems="SelectedKeywords">
                    <ItemTemplate>
                        @context.Item.Name
                    </ItemTemplate>
                </TreeView>
            </div>
        </div>
        <div class="row">
            <div class="col-auto">
                <button type="reset" class="btn btn-primary" disabled=@IsSelectedKeywordsEmpty() @onclick="@(() => ClearSelectedKeywords())">Clear</button>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-primary" disabled=@IsSelectedKeywordsEmpty() @onclick="@(() => CopyToClipboard(ToFlickrTagsString(SelectedKeywords)))">Copy</button>
            </div>
        </div>
    </form>
}

@code {
    private List<Keyword> AllKeywords = new List<Keyword>();
    private List<Keyword> SelectedKeywords = new List<Keyword>();

    protected override async Task OnInitializedAsync()
    {
        AllKeywords = (await KeywordService.GetKeywordsAsync()).ToList();
    }

    private void ClearSelectedKeywords()
    {
        SelectedKeywords = new List<Keyword>();
    }

    private async Task CopyToClipboard(string input)
    {
        await ClipboardService.WriteTextAsync(input);
    }

    private bool IsSelectedKeywordsEmpty()
    {
        return SelectedKeywords.Count == 0;
    }

    private string ToFlickrTagsString(IEnumerable<Keyword> keywords)
    {
        var values = keywords
            .Where(keyword => keyword.Keywords == null)
            .Select(keyword => keyword.Name);

        return TagService.ToFlickrTagsString(values);
    }
}