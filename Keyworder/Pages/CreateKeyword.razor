@page "/create-keyword"

<PageTitle>Create Keyword</PageTitle>

@using Keyworder.Data
@inject KeywordService KeywordService

<div class="row">
    <div class="col">
        <h2>Create Keyword</h2>
    </div>
</div>

@if (allKeywords == null)
{
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <RadzenLabel Text="Category" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenDropDown TValue="string" Placeholder="Select..." Data=@GetCategories() @bind-Value=@selectedCategory Change=@(value => OnCategoryDropDownValueChanged(value)) />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenTextBox Placeholder="Keyword..." MaxLength=50 @bind-Value=@specifiedKeyword @oninput=@(args => OnKeywordTextChanged(args?.Value)) />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton style="width: 160px" Icon="save" BusyText="Saving..." IsBusy=@isKeywordSaveBusy Click=@OnSaveKeywordClicked Text="Save" Disabled=@IsSaveKeywordButtonDisabled() />
            <RadzenLabel Text=@resultMessage Visible=@isKeywordSavedVisible />
        </div>
    </div>
}

@code {
    private List<Keyword> allKeywords = new List<Keyword>();
    private bool isKeywordSavedVisible = false;
    private bool isKeywordSaveBusy = false;
    private string? resultMessage = null;
    private string? selectedCategory = null;
    private string? specifiedKeyword = null;

    protected override async Task OnInitializedAsync()
    {
        allKeywords = (await KeywordService.GetKeywordsAsync()).ToList();
    }

    private List<string> GetCategories()
    {
        return allKeywords
            .Where(k => k.Keywords != null)
            .Select(k => k.Name)
            .Distinct()
            .OrderBy(name => name, StringComparer.OrdinalIgnoreCase)
            .ToList();
    }

    private bool IsSaveKeywordButtonDisabled()
    {
        return 
            string.IsNullOrWhiteSpace(selectedCategory) || 
            string.IsNullOrWhiteSpace(specifiedKeyword);
    }

    private void OnCategoryDropDownValueChanged(object? value)
    {
        selectedCategory = value?.ToString();
        isKeywordSavedVisible = false;
    }

    private void OnKeywordTextChanged(object? value)
    {
        specifiedKeyword = value?.ToString();
        isKeywordSavedVisible = false;
    }

    private async Task OnSaveKeywordClicked()
    {
        isKeywordSaveBusy = true;

        var resultType = await this.KeywordService.CreateKeywordAsync(selectedCategory, specifiedKeyword);

        // todo: result status bar or whatever

        selectedCategory = null;
        specifiedKeyword = null;
        resultMessage = resultType.ToString();
        isKeywordSavedVisible = true;
        isKeywordSaveBusy = false;
    }
}